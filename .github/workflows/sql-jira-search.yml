# .github/workflows/csv-git-jira-search.yml
name: CSV to Git-Jira Search

on:
  workflow_dispatch:  # Manual trigger
    inputs:
      csv_file:
        description: 'CSV file name (e.g., tasks.csv)'
        required: false
        default: 'tasks.csv'
        type: string
  push:
    paths:
      - 'tasks.csv'
      - 'data/*.csv'
  schedule:
    - cron: '0 9 * * 1-5'  # Run at 9 AM on weekdays

jobs:
  csv-git-jira-search:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for git searches

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: |
        npm init -y
        npm install csv-parser

    - name: Create CSV to Git-Jira search script
      run: |
        cat > csv-git-jira-search.js << 'EOF'
        const fs = require('fs');
        const csv = require('csv-parser');
        const { execSync } = require('child_process');
        const path = require('path');

        async function getTasksFromCSV() {
          return new Promise((resolve, reject) => {
            const taskNumbers = [];
            const csvFile = process.env.CSV_FILE || 'tasks.csv';
            
            console.log(`Reading CSV file: ${csvFile}`);
            
            // Check if file exists
            if (!fs.existsSync(csvFile)) {
              // Try alternative locations
              const alternativeFiles = [
                'data/tasks.csv',
                'csv/tasks.csv', 
                'exports/tasks.csv',
                'tmp_tasks.csv'
              ];
              
              let foundFile = null;
              for (const altFile of alternativeFiles) {
                if (fs.existsSync(altFile)) {
                  foundFile = altFile;
                  break;
                }
              }
              
              if (!foundFile) {
                reject(new Error(`CSV file not found: ${csvFile}. Please upload your CSV file to the repository.`));
                return;
              }
              
              console.log(`Using alternative file: ${foundFile}`);
              csvFile = foundFile;
            }

            fs.createReadStream(csvFile)
              .pipe(csv())
              .on('data', (row) => {
                // Try different possible column names for task number
                const taskNo = row['Task number'] || row.task_no || row.taskNo || row.task_number || 
                              row.Task_No || row.TaskNo || row.TASK_NO ||
                              row.id || row.ID || row.ticket || row.issue ||
                              Object.values(row)[0]; // First column if headers don't match
                
                if (taskNo && taskNo.toString().trim()) {
                  // Store additional CSV data for enhanced reporting
                  const taskData = {
                    taskNo: taskNo.toString().trim(),
                    userName: row['User name'] || row.user_name || '',
                    status: row['Status'] || row.status || '',
                    openDate: row['OPENDATE'] || row.open_date || '',
                    openTime: row['OPENTIME'] || row.open_time || '',
                    closeDate: row['CLOSEDATE'] || row.close_date || '',
                    closeTime: row['CLOSETIME'] || row.close_time || ''
                  };
                  
                  taskNumbers.push(taskData);
                }
              })
              .on('end', () => {
                // Remove duplicates by task number
                const seen = new Set();
                const uniqueTasks = taskNumbers.filter(task => {
                  if (seen.has(task.taskNo)) {
                    return false;
                  }
                  seen.add(task.taskNo);
                  return true;
                });
                
                console.log(`Found ${uniqueTasks.length} unique tasks in CSV (${taskNumbers.length} total rows)`);
                
                if (uniqueTasks.length === 0) {
                  reject(new Error('No valid task numbers found in CSV. Please check your CSV format.'));
                } else {
                  resolve(uniqueTasks);
                }
              })
              .on('error', (error) => {
                reject(new Error(`Error reading CSV file: ${error.message}`));
              });
          });
        }

        function searchInGitHistory(taskNumbers) {
          console.log('Searching in Git history...');
          const results = [];

          taskNumbers.forEach((taskNo, index) => {
            console.log(`Searching for task ${index + 1}/${taskNumbers.length}: ${taskNo}`);
            
            try {
              // Search in commit messages
              const commitSearch = execSync(
                `git log --all --grep="${taskNo}" --pretty=format:"%H|%an|%ad|%s" --date=short`,
                { encoding: 'utf8', stdio: ['pipe', 'pipe', 'ignore'] }
              ).trim();

              // Search in branch names
              const branchSearch = execSync(
                `git branch -a | grep -i "${taskNo}" || true`,
                { encoding: 'utf8', stdio: ['pipe', 'pipe', 'ignore'] }
              ).trim();

              // Search in file content history
              const fileSearch = execSync(
                `git log --all -S"${taskNo}" --pretty=format:"%H|%an|%ad|%s" --date=short || true`,
                { encoding: 'utf8', stdio: ['pipe', 'pipe', 'ignore'] }
              ).trim();

              // Search in current files
              const currentFileSearch = execSync(
                `grep -r "${taskNo}" . --exclude-dir=.git --exclude-dir=node_modules --exclude="*.csv" || true`,
                { encoding: 'utf8', stdio: ['pipe', 'pipe', 'ignore'] }
              ).trim();

              if (commitSearch || branchSearch || fileSearch || currentFileSearch) {
                results.push({
                  taskNo: taskNo,
                  commits: commitSearch ? commitSearch.split('\n').filter(line => line).map(line => {
                    const parts = line.split('|');
                    return { 
                      hash: parts[0] || '', 
                      author: parts[1] || '', 
                      date: parts[2] || '', 
                      message: parts[3] || '' 
                    };
                  }) : [],
                  branches: branchSearch ? branchSearch.split('\n').filter(b => b.trim()) : [],
                  fileChanges: fileSearch ? fileSearch.split('\n').filter(line => line).map(line => {
                    const parts = line.split('|');
                    return { 
                      hash: parts[0] || '', 
                      author: parts[1] || '', 
                      date: parts[2] || '', 
                      message: parts[3] || '' 
                    };
                  }) : [],
                  currentFiles: currentFileSearch ? currentFileSearch.split('\n').filter(f => f.trim()) : []
                });
              }
            } catch (error) {
              console.log(`No Git references found for task: ${taskNo}`);
            }
          });

          console.log(`Found Git references for ${results.length} tasks`);
          return results;
        }

        function generateHTMLReport(searchResults, taskNumbers, csvFile) {
          const foundTasks = new Set();
          searchResults.forEach(result => {
            foundTasks.add(result.taskNo);
          });

          const notFoundTasks = taskNumbers.filter(task => !foundTasks.has(task));
          const jiraBaseUrl = 'https://your-jira-instance.atlassian.net'; // Update this URL

          const html = `
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>CSV Git-Jira Task Search Results</title>
            <style>
                body {
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    margin: 0;
                    padding: 20px;
                    background-color: #f6f8fa;
                    line-height: 1.6;
                }
                .container {
                    max-width: 1400px;
                    margin: 0 auto;
                    background-color: white;
                    border-radius: 12px;
                    box-shadow: 0 4px 20px rgba(0,0,0,0.1);
                    overflow: hidden;
                }
                .header {
                    background: linear-gradient(135deg, #0366d6, #0052cc);
                    color: white;
                    padding: 30px;
                    text-align: center;
                }
                .header h1 {
                    margin: 0 0 10px 0;
                    font-size: 2.5em;
                    font-weight: 300;
                }
                .header p {
                    margin: 5px 0;
                    opacity: 0.9;
                }
                .stats {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                    gap: 0;
                    margin-bottom: 0;
                }
                .stat-card {
                    padding: 25px;
                    text-align: center;
                    border-right: 1px solid #e1e5e9;
                }
                .stat-card:last-child {
                    border-right: none;
                }
                .stat-number {
                    font-size: 2.5em;
                    font-weight: bold;
                    color: #0366d6;
                    margin-bottom: 5px;
                }
                .stat-label {
                    color: #586069;
                    font-size: 0.9em;
                    text-transform: uppercase;
                    letter-spacing: 0.5px;
                }
                .content {
                    padding: 30px;
                }
                .section-title {
                    font-size: 1.5em;
                    color: #24292e;
                    margin: 30px 0 20px 0;
                    padding-bottom: 10px;
                    border-bottom: 2px solid #e1e5e9;
                }
                .task-grid {
                    display: grid;
                    gap: 20px;
                }
                .task-card {
                    border: 1px solid #e1e5e9;
                    border-radius: 8px;
                    overflow: hidden;
                    transition: box-shadow 0.2s;
                }
                .task-card:hover {
                    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
                }
                .task-header {
                    background-color: #f6f8fa;
                    padding: 15px 20px;
                    border-bottom: 1px solid #e1e5e9;
                    display: flex;
                    align-items: center;
                    gap: 15px;
                }
                .task-number {
                    background-color: #0366d6;
                    color: white;
                    padding: 8px 16px;
                    border-radius: 20px;
                    font-weight: bold;
                    text-decoration: none;
                    font-size: 0.9em;
                    transition: background-color 0.2s;
                }
                .task-number:hover {
                    background-color: #0052cc;
                }
                .task-body {
                    padding: 20px;
                }
                .evidence-grid {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                    gap: 20px;
                }
                .evidence-section {
                    background-color: #f8f9fa;
                    border-radius: 6px;
                    padding: 15px;
                }
                .evidence-title {
                    font-weight: 600;
                    color: #24292e;
                    margin-bottom: 12px;
                    display: flex;
                    align-items: center;
                    gap: 8px;
                }
                .evidence-item {
                    background-color: white;
                    border-radius: 4px;
                    padding: 12px;
                    margin: 8px 0;
                    border-left: 3px solid #28a745;
                    font-family: 'SFMono-Regular', Consolas, monospace;
                    font-size: 0.85em;
                }
                .branch-item {
                    border-left-color: #6f42c1;
                }
                .file-item {
                    border-left-color: #fd7e14;
                    overflow: hidden;
                    text-overflow: ellipsis;
                }
                .commit-hash {
                    color: #0366d6;
                    font-weight: bold;
                }
                .commit-meta {
                    color: #586069;
                    font-size: 0.8em;
                    margin-top: 4px;
                }
                .not-found-section {
                    background: linear-gradient(135deg, #ffeaa7, #fab1a0);
                    margin: 30px 0;
                    padding: 25px;
                    border-radius: 8px;
                    text-align: center;
                }
                .not-found-section h3 {
                    color: #d63031;
                    margin-top: 0;
                }
                .not-found-grid {
                    display: grid;
                    grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
                    gap: 10px;
                    margin-top: 20px;
                }
                .not-found-item {
                    background-color: rgba(255,255,255,0.8);
                    padding: 10px;
                    border-radius: 6px;
                    font-weight: bold;
                    transition: transform 0.2s;
                }
                .not-found-item:hover {
                    transform: translateY(-2px);
                }
                .not-found-item a {
                    color: #d63031;
                    text-decoration: none;
                }
                .footer {
                    background-color: #f6f8fa;
                    padding: 20px 30px;
                    border-top: 1px solid #e1e5e9;
                    color: #586069;
                    font-size: 0.9em;
                }
                .search-info {
                    background-color: #e3f2fd;
                    border-left: 4px solid #2196f3;
                    padding: 15px;
                    margin: 20px 0;
                    border-radius: 0 4px 4px 0;
                }
                @media (max-width: 768px) {
                    .stats {
                        grid-template-columns: 1fr 1fr;
                    }
                    .evidence-grid {
                        grid-template-columns: 1fr;
                    }
                }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>🔍 Git-Jira Task Search</h1>
                    <p>Generated on: ${new Date().toLocaleString()}</p>
                    <p>Source: ${csvFile} • Tasks searched in Git history</p>
                </div>

                <div class="stats">
                    <div class="stat-card">
                        <div class="stat-number">${taskNumbers.length}</div>
                        <div class="stat-label">Total Tasks</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">${foundTasks.size}</div>
                        <div class="stat-label">Found in Git</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">${notFoundTasks.length}</div>
                        <div class="stat-label">Not Found</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">${Math.round((foundTasks.size / taskNumbers.length) * 100)}%</div>
                        <div class="stat-label">Success Rate</div>
                    </div>
                </div>

                <div class="content">
                    ${searchResults.length > 0 ? `
                      <h2 class="section-title">📋 Found Tasks (${searchResults.length})</h2>
                      <div class="task-grid">
                        ${searchResults.map(task => `
                          <div class="task-card">
                            <div class="task-header">
                              <a href="${jiraBaseUrl}/browse/${task.taskNo}" 
                                 class="task-number" 
                                 target="_blank">${task.taskNo}</a>
                              <span style="color: #586069; font-size: 0.9em;">
                                ${task.commits.length + task.branches.length + task.currentFiles.length} references found
                              </span>
                            </div>
                            
                            <div class="task-body">
                              <div class="evidence-grid">
                                ${task.commits.length > 0 ? `
                                  <div class="evidence-section">
                                    <div class="evidence-title">
                                      🔄 Commits (${task.commits.length})
                                    </div>
                                    ${task.commits.slice(0, 3).map(commit => `
                                      <div class="evidence-item">
                                        <div class="commit-hash">${commit.hash.substring(0, 8)}</div>
                                        <div>${commit.message}</div>
                                        <div class="commit-meta">${commit.author} • ${commit.date}</div>
                                      </div>
                                    `).join('')}
                                    ${task.commits.length > 3 ? `<div style="text-align: center; color: #586069; font-size: 0.8em; margin-top: 10px;">... and ${task.commits.length - 3} more commits</div>` : ''}
                                  </div>
                                ` : ''}
                                
                                ${task.branches.length > 0 ? `
                                  <div class="evidence-section">
                                    <div class="evidence-title">
                                      🌿 Branches (${task.branches.length})
                                    </div>
                                    ${task.branches.slice(0, 5).map(branch => `
                                      <div class="evidence-item branch-item">${branch.trim()}</div>
                                    `).join('')}
                                  </div>
                                ` : ''}
                                
                                ${task.currentFiles.length > 0 ? `
                                  <div class="evidence-section">
                                    <div class="evidence-title">
                                      📄 Files (${task.currentFiles.length})
                                    </div>
                                    ${task.currentFiles.slice(0, 5).map(file => `
                                      <div class="evidence-item file-item">${file}</div>
                                    `).join('')}
                                    ${task.currentFiles.length > 5 ? `<div style="text-align: center; color: #586069; font-size: 0.8em; margin-top: 10px;">... and ${task.currentFiles.length - 5} more files</div>` : ''}
                                  </div>
                                ` : ''}
                              </div>
                            </div>
                          </div>
                        `).join('')}
                      </div>
                    ` : ''}

                    ${notFoundTasks.length > 0 ? `
                      <div class="not-found-section">
                        <h3>❌ Tasks Not Found in Git (${notFoundTasks.length})</h3>
                        <p>These task numbers from your CSV were not found in the Git repository:</p>
                        <div class="not-found-grid">
                          ${notFoundTasks.map(task => `
                            <div class="not-found-item">
                              <a href="${jiraBaseUrl}/browse/${task}" target="_blank">${task}</a>
                            </div>
                          `).join('')}
                        </div>
                        <p style="margin-top: 20px; font-size: 0.9em;">
                          💡 These tasks might exist in Jira but haven't been referenced in Git commits, branches, or files yet.
                        </p>
                      </div>
                    ` : ''}

                    <div class="search-info">
                      <h4 style="margin-top: 0; color: #1976d2;">🔍 Search Methodology</h4>
                      <ul style="margin-bottom: 0;">
                        <li><strong>Commit Messages:</strong> Searched all commit messages for task references</li>
                        <li><strong>Branch Names:</strong> Found branches containing task numbers</li>
                        <li><strong>File History:</strong> Located commits that modified files mentioning tasks</li>
                        <li><strong>Current Files:</strong> Searched current repository files for task mentions</li>
                      </ul>
                    </div>
                </div>

                <div class="footer">
                    <p>📊 Report generated from <strong>${csvFile}</strong> • 
                       ${taskNumbers.length} tasks processed • 
                       ${foundTasks.size} found in Git • 
                       ${notFoundTasks.length} not found
                    </p>
                    <p>🔗 Update the Jira base URL in the workflow to make task links functional</p>
                </div>
            </div>
        </body>
        </html>
          `;

          return html;
        }

        async function main() {
          try {
            console.log('🚀 Starting CSV Git-Jira task search process...');
            
            // Get tasks from CSV file
            const taskNumbers = await getTasksFromCSV();
            
            if (taskNumbers.length === 0) {
              console.log('❌ No tasks found in CSV file');
              return;
            }

            console.log(`✅ Loaded ${taskNumbers.length} tasks from CSV`);

            // Search in Git
            const searchResults = searchInGitHistory(taskNumbers);

            // Generate HTML report
            const csvFile = process.env.CSV_FILE || 'tasks.csv';
            const htmlReport = generateHTMLReport(searchResults, taskNumbers, csvFile);
            fs.writeFileSync('git-jira-search-results.html', htmlReport);
            
            // Save JSON data
            fs.writeFileSync('git-jira-search-results.json', JSON.stringify({
              csvFile: csvFile,
              taskNumbers: taskNumbers,
              searchResults: searchResults,
              timestamp: new Date().toISOString()
            }, null, 2));

            console.log('📄 HTML report generated: git-jira-search-results.html');
            console.log(`📊 Results Summary:`);
            console.log(`   • Total tasks from CSV: ${taskNumbers.length}`);
            console.log(`   • Found in Git: ${searchResults.length}`);
            console.log(`   • Not found: ${taskNumbers.length - searchResults.length}`);
            console.log(`   • Success rate: ${Math.round((searchResults.length / taskNumbers.length) * 100)}%`);

          } catch (error) {
            console.error('❌ Process failed:', error.message);
            process.exit(1);
          }
        }

        main();
        EOF

    - name: Run CSV Git-Jira search
      env:
        CSV_FILE: ${{ github.event.inputs.csv_file || 'tasks.csv' }}
      run: node csv-git-jira-search.js

    - name: Upload HTML report as artifact
      uses: actions/upload-artifact@v4
      with:
        name: csv-git-jira-search-results-${{ github.run_number }}
        path: |
          git-jira-search-results.html
          git-jira-search-results.json
        retention-days: 30

    - name: Comment on PR with results (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const data = JSON.parse(fs.readFileSync('git-jira-search-results.json', 'utf8'));
          
          const comment = `## 🔍 Git-Jira Search Results
          
          **📊 Summary:**
          - **Total tasks:** ${data.taskNumbers.length}
          - **Found in Git:** ${data.searchResults.length}
          - **Success rate:** ${Math.round((data.searchResults.length / data.taskNumbers.length) * 100)}%
          
          📄 [Download detailed HTML report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
